from flask import Flask, request, render_template
from transformers import GPT2Tokenizer, GPT2LMHeadModel
import torch
import nltk
from nltk.probability import FreqDist
import matplotlib.pyplot as plt
from collections import Counter
from nltk.corpus import stopwords
import string
import base64

app = Flask(__name__)

nltk.download('punkt')
nltk.download('stopwords')

# Load GPT-2 tokenizer and model
tokenizer = GPT2Tokenizer.from_pretrained('gpt2')
model = GPT2LMHeadModel.from_pretrained('gpt2')

def calculate_perplexity(text):
    encoded_input = tokenizer.encode(text, add_special_tokens=False, return_tensors='pt')
    input_ids = encoded_input[0]

    with torch.no_grad():
        outputs = model(input_ids)
        logits = outputs.logits

    perplexity = torch.exp(torch.nn.functional.cross_entropy(logits.view(-1, logits.size(-1)), input_ids.view(-1)))
    return perplexity.item()

def calculate_burstiness(text):
    tokens = nltk.word_tokenize(text.lower())
    word_freq = FreqDist(tokens)
    repeated_count = sum(count > 1 for count in word_freq.values())
    burstiness_score = repeated_count / len(word_freq)
    return burstiness_score

def plot_top_repeated_words(text):
    # Tokenize the text and remove stopwords and special characters
    tokens = text.split()
    stop_words = set(stopwords.words('english'))
    tokens = [token.lower() for token in tokens if token.lower() not in stop_words and token.lower() not in string.punctuation]

    # Count the occurrence of each word
    word_counts = Counter(tokens)

    # Get the top 10 most repeated words
    top_words = word_counts.most_common(10)

    # Extract the words and their counts for plotting
    words = [word for word, count in top_words]
    counts = [count for word, count in top_words]

    # Plot the bar chart using Matplotlib
    plt.bar(words, counts)
    plt.xlabel('Words')
    plt.ylabel('Counts')
    plt.title('Top 10 Most Repeated Words')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig('top_repeated_words.png')  # Save the plot as an image
    plt.close()

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/analyze', methods=['POST'])
def analyze():
    text = request.form['text']

    perplexity = calculate_perplexity(text)
    burstiness_score = calculate_burstiness(text)

    if perplexity > 30000 and burstiness_score < 0.2:
        result = "Text Analysis Result: AI generated content"
    else:
        result = "Text Analysis Result: Likely not generated by AI"

    plot_top_repeated_words(text)

    # Open the saved plot image and encode it as base64
    with open('top_repeated_words.png', 'rb') as img_file:
        encoded_img = base64.b64encode(img_file.read()).decode('utf-8')

    return render_template('result.html', text=text, perplexity=perplexity, burstiness_score=burstiness_score, result=result, encoded_img=encoded_img)

if __name__ == "__main__":
    app.run(debug=True)
